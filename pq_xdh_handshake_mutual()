from src.qkd_bb84 import bb84_key_exchange
from src.kyber_kem import kyber_keygen, kyber_encapsulate, kyber_decapsulate
from src.ecc_key_exchange import ecc_keygen, ecc_derive_shared_secret
from secure_enclave import secure_store_key, retrieve_secure_key

def pq_qkd_sgx_hybrid_handshake():
    """Hybrid Handshake: QKD + SGX Secure Storage + TrustZone"""
    
    # 1. Generate Quantum-Secured Key (QKD)
    qkd_key = bb84_key_exchange()

    # 2. Generate PQC Key Exchange (Kyber-1024)
    pk_kyber, sk_kyber = kyber_keygen()
    ciphertext, ss_kyber = kyber_encapsulate(pk_kyber)

    # 3. Securely Store Kyber Secret Key in SGX
    sealed_sk = secure_store_key(sk_kyber)

    # 4. Retrieve Secure Key and Decapsulate
    sk_unsealed = retrieve_secure_key(sealed_sk)
    ss_decapsulated = kyber_decapsulate(ciphertext, sk_unsealed)

    # 5. Generate Classical ECC Key Exchange (X25519)
    pk_ecc, sk_ecc = ecc_keygen()
    shared_secret_ecc = ecc_derive_shared_secret(pk_ecc, sk_ecc)

    # 6. Store Key in TrustZone Secure Storage
    store_key_in_trustzone(ss_decapsulated)

    # 7. Merge QKD, PQC, ECC
    final_shared_secret = hashlib.sha3_512(qkd_key.encode() + ss_decapsulated + shared_secret_ecc).digest()

    return True, final_shared_secret

if __name__ == "__main__":
    valid, shared_secret = pq_qkd_sgx_hybrid_handshake()
    print(f"SGX + QKD + TrustZone Hybrid Handshake Successful: {valid}")
