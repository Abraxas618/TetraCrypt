import os
from src.kyber_kem import kyber_keygen, kyber_encapsulate, kyber_decapsulate
from src.falcon_sign import falcon_keygen, falcon_sign, falcon_verify

def generate_kat():
    os.makedirs("KAT", exist_ok=True)
    with open("KAT/tetrapq_xdh_kat.txt", "w") as f:
        # Alice's keys
        pk_A_kyber, sk_A_kyber = kyber_keygen()
        pk_A_falcon, sk_A_falcon = falcon_keygen()
        f.write(f"Alice Kyber Public Key: {pk_A_kyber.hex()}\n")
        f.write(f"Alice Kyber Secret Key: {sk_A_kyber.hex()}\n")
        f.write(f"Alice Falcon Public Key: {pk_A_falcon.hex()}\n")
        f.write(f"Alice Falcon Secret Key: {sk_A_falcon.hex()}\n")

        # Bob's keys
        pk_B_kyber, sk_B_kyber = kyber_keygen()
        pk_B_falcon, sk_B_falcon = falcon_keygen()
        f.write(f"Bob Kyber Public Key: {pk_B_kyber.hex()}\n")
        f.write(f"Bob Kyber Secret Key: {sk_B_kyber.hex()}\n")
        f.write(f"Bob Falcon Public Key: {pk_B_falcon.hex()}\n")
        f.write(f"Bob Falcon Secret Key: {sk_B_falcon.hex()}\n")

        # Key exchange
        ct_B, ss_B = kyber_encapsulate(pk_A_kyber)
        ss_A = kyber_decapsulate(ct_B, sk_A_kyber)
        f.write(f"Ciphertext (Bob to Alice): {ct_B.hex()}\n")
        f.write(f"Shared Secret (Bob): {ss_B.hex()}\n")
        f.write(f"Shared Secret (Alice): {ss_A.hex()}\n")

        # Authentication
        sig_A = falcon_sign(ss_A, sk_A_falcon)
        sig_B = falcon_sign(ss_B, sk_B_falcon)
        f.write(f"Signature (Alice): {sig_A.hex()}\n")
        f.write(f"Signature (Bob): {sig_B.hex()}\n")

        # Verification
        valid_A = falcon_verify(ss_B, sig_A, pk_A_falcon)
        valid_B = falcon_verify(ss_A, sig_B, pk_B_falcon)
        f.write(f"Verification (Alice’s sig by Bob): {valid_A}\n")
        f.write(f"Verification (Bob’s sig by Alice): {valid_B}\n")

if __name__ == "__main__":
    generate_kat()
